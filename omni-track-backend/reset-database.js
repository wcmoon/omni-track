/**
 * Êï∞ÊçÆÂ∫ìÈáçÁΩÆÂíåÂàùÂßãÂåñËÑöÊú¨
 * ‰∏ÄÊ≠•ÂÆåÊàêÔºöÊ∏ÖÈô§ÊâÄÊúâË°® -> ÈáçÊñ∞ÂàõÂª∫Ë°®ÁªìÊûÑ -> ÊèíÂÖ•ÂàùÂßãÊï∞ÊçÆ
 * ‰ΩøÁî®ÊñπÊ≥ï: node reset-database.js
 */

// Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
try {
  require('dotenv').config();
  console.log('üìÑ Â∑≤Âä†ËΩΩ .env Êñá‰ª∂');
} catch (e) {
  const fs = require('fs');
  const path = require('path');
  const envFile = path.join(__dirname, '.env');
  if (fs.existsSync(envFile)) {
    const envContent = fs.readFileSync(envFile, 'utf8');
    envContent.split('\n').forEach(line => {
      const trimmedLine = line.trim();
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        const [key, ...valueParts] = trimmedLine.split('=');
        const value = valueParts.join('=').trim();
        if (key && value) {
          process.env[key.trim()] = value;
        }
      }
    });
    console.log('üìÑ ÊâãÂä®Âä†ËΩΩ .env Êñá‰ª∂ÊàêÂäü');
  }
}

const { Pool } = require('pg');

const DATABASE_URL = process.env.DATABASE_URL;
if (!DATABASE_URL) {
  console.error('‚ùå ÈîôËØØ: DATABASE_URL ÁéØÂ¢ÉÂèòÈáèÊú™ËÆæÁΩÆ');
  process.exit(1);
}

console.log('üîó Êï∞ÊçÆÂ∫ìËøûÊé•:', DATABASE_URL.replace(/\/\/.*:.*@/, '//***:***@'));

const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function resetDatabase() {
  console.log('üî• ÂºÄÂßãÈáçÁΩÆÊï∞ÊçÆÂ∫ì...\n');

  const client = await pool.connect();

  try {
    // 1. Ê∏ÖÈô§ÊâÄÊúâË°®
    console.log('1Ô∏è‚É£ Ê∏ÖÈô§Áé∞ÊúâË°®...');
    await client.query(`
      DROP TABLE IF EXISTS analysis_queues CASCADE;
      DROP TABLE IF EXISTS usage_quotas CASCADE;
      DROP TABLE IF EXISTS user_subscriptions CASCADE;
      DROP TABLE IF EXISTS subscription_tiers CASCADE;
      DROP TABLE IF EXISTS ai_interactions CASCADE;
      DROP TABLE IF EXISTS log_entries CASCADE;
      DROP TABLE IF EXISTS logs CASCADE;
      DROP TABLE IF EXISTS tasks CASCADE;
      DROP TABLE IF EXISTS projects CASCADE;
      DROP TABLE IF EXISTS users CASCADE;
    `);
    console.log('‚úÖ ÊâÄÊúâË°®Â∑≤Ê∏ÖÈô§');

    // 2. ÂàõÂª∫ÂÆåÊï¥ÁöÑË°®ÁªìÊûÑÔºàÂü∫‰∫éÂÆû‰ΩìÂÆö‰πâÔºâ
    console.log('\n2Ô∏è‚É£ ÂàõÂª∫Êñ∞ÁöÑË°®ÁªìÊûÑ...');
    
    // Áî®Êà∑Ë°®
    await client.query(`
      CREATE TABLE users (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255),
        email VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255),
        "subscriptionTier" VARCHAR(50) DEFAULT 'free',
        "subscriptionStartDate" TIMESTAMP,
        "subscriptionEndDate" TIMESTAMP,
        "maxProjects" INTEGER DEFAULT 5,
        "maxLogEntries" INTEGER DEFAULT 1000,
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('  ‚úÖ users Ë°®');

    // È°πÁõÆË°®
    await client.query(`
      CREATE TABLE projects (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        title VARCHAR(255) NOT NULL,
        description TEXT,
        color VARCHAR(7) DEFAULT '#6366f1',
        "isActive" BOOLEAN DEFAULT true,
        "userId" UUID REFERENCES users(id) ON DELETE CASCADE,
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('  ‚úÖ projects Ë°®');

    // ‰ªªÂä°Ë°®ÔºàÂü∫‰∫éÂÆû‰ΩìÂÆö‰πâÁöÑÂÆåÊï¥Â≠óÊÆµÔºâ
    await client.query(`
      CREATE TABLE tasks (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        description TEXT NOT NULL,
        title VARCHAR(255),
        status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'in_progress', 'completed', 'cancelled')),
        priority VARCHAR(20) DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),
        "completionTime" TIMESTAMP,
        "dueDate" TIMESTAMP,
        "endTime" VARCHAR(10),
        "estimatedDuration" INTEGER,
        "actualDuration" INTEGER,
        tags TEXT[],
        "userId" UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        "projectId" UUID REFERENCES projects(id) ON DELETE SET NULL,
        "parentTaskId" UUID REFERENCES tasks(id) ON DELETE SET NULL,
        "isRecurring" BOOLEAN DEFAULT false,
        "recurrencePattern" JSONB,
        "aiGenerated" BOOLEAN DEFAULT false,
        "aiContext" TEXT,
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        "completedAt" TIMESTAMP
      )
    `);
    console.log('  ‚úÖ tasks Ë°®');

    // Êó•ÂøóË°®
    await client.query(`
      CREATE TABLE logs (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        title VARCHAR(255),
        content TEXT NOT NULL,
        category VARCHAR(100),
        mood VARCHAR(50),
        tags TEXT[],
        "isPrivate" BOOLEAN DEFAULT false,
        "projectId" UUID REFERENCES projects(id) ON DELETE SET NULL,
        "userId" UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('  ‚úÖ logs Ë°®');

    // Êó•ÂøóÊù°ÁõÆË°®
    await client.query(`
      CREATE TABLE log_entries (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        content TEXT NOT NULL,
        "logId" UUID REFERENCES logs(id) ON DELETE CASCADE,
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('  ‚úÖ log_entries Ë°®');

    // AI‰∫§‰∫íË°®
    await client.query(`
      CREATE TABLE ai_interactions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        "userId" UUID REFERENCES users(id) ON DELETE CASCADE,
        query TEXT NOT NULL,
        response TEXT NOT NULL,
        "modelUsed" VARCHAR(100),
        "tokensUsed" INTEGER DEFAULT 0,
        "responseTime" INTEGER DEFAULT 0,
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('  ‚úÖ ai_interactions Ë°®');

    // ËÆ¢ÈòÖÁ≠âÁ∫ßË°®
    await client.query(`
      CREATE TABLE subscription_tiers (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(100) NOT NULL UNIQUE,
        "maxProjects" INTEGER DEFAULT 5,
        "maxLogEntries" INTEGER DEFAULT 1000,
        "aiRequestsPerDay" INTEGER DEFAULT 10,
        "storageLimit" BIGINT DEFAULT 1048576,
        features TEXT[],
        "monthlyPrice" DECIMAL(10,2) DEFAULT 0,
        "yearlyPrice" DECIMAL(10,2) DEFAULT 0,
        "isActive" BOOLEAN DEFAULT true,
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('  ‚úÖ subscription_tiers Ë°®');

    // Áî®Êà∑ËÆ¢ÈòÖË°®
    await client.query(`
      CREATE TABLE user_subscriptions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        "userId" UUID REFERENCES users(id) ON DELETE CASCADE,
        "subscriptionTierId" UUID REFERENCES subscription_tiers(id),
        "startDate" TIMESTAMP NOT NULL,
        "endDate" TIMESTAMP,
        "isActive" BOOLEAN DEFAULT true,
        "paymentMethod" VARCHAR(100),
        "paymentId" VARCHAR(255),
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('  ‚úÖ user_subscriptions Ë°®');

    // ‰ΩøÁî®ÈÖçÈ¢ùË°®
    await client.query(`
      CREATE TABLE usage_quotas (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        "userId" UUID REFERENCES users(id) ON DELETE CASCADE,
        "quotaType" VARCHAR(100) NOT NULL,
        "usedAmount" INTEGER DEFAULT 0,
        "limitAmount" INTEGER NOT NULL,
        "resetDate" TIMESTAMP,
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('  ‚úÖ usage_quotas Ë°®');

    // ÂàÜÊûêÈòüÂàóË°®
    await client.query(`
      CREATE TABLE analysis_queues (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        "userId" UUID REFERENCES users(id) ON DELETE CASCADE,
        "itemType" VARCHAR(100) NOT NULL,
        "itemId" UUID NOT NULL,
        status VARCHAR(50) DEFAULT 'pending',
        "analysisType" VARCHAR(100) NOT NULL,
        result JSONB,
        error TEXT,
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('  ‚úÖ analysis_queues Ë°®');

    // 3. ÂàõÂª∫Á¥¢Âºï
    console.log('\n3Ô∏è‚É£ ÂàõÂª∫Á¥¢Âºï...');
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)',
      'CREATE INDEX IF NOT EXISTS idx_projects_user_id ON projects("userId")',
      'CREATE INDEX IF NOT EXISTS idx_tasks_user_id ON tasks("userId")',
      'CREATE INDEX IF NOT EXISTS idx_tasks_project_id ON tasks("projectId")',
      'CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status)',
      'CREATE INDEX IF NOT EXISTS idx_logs_user_id ON logs("userId")',
      'CREATE INDEX IF NOT EXISTS idx_logs_project_id ON logs("projectId")',
      'CREATE INDEX IF NOT EXISTS idx_log_entries_log_id ON log_entries("logId")',
      'CREATE INDEX IF NOT EXISTS idx_ai_interactions_user_id ON ai_interactions("userId")',
      'CREATE INDEX IF NOT EXISTS idx_user_subscriptions_user_id ON user_subscriptions("userId")',
      'CREATE INDEX IF NOT EXISTS idx_usage_quotas_user_id ON usage_quotas("userId")',
      'CREATE INDEX IF NOT EXISTS idx_analysis_queues_user_id ON analysis_queues("userId")'
    ];

    for (const indexSQL of indexes) {
      await client.query(indexSQL);
    }
    console.log('‚úÖ Á¥¢ÂºïÂàõÂª∫ÂÆåÊàê');

    // 4. ÊèíÂÖ•ÂàùÂßãÊï∞ÊçÆ
    console.log('\n4Ô∏è‚É£ ÊèíÂÖ•ÂàùÂßãÊï∞ÊçÆ...');
    
    // ÊèíÂÖ•ËÆ¢ÈòÖÁ≠âÁ∫ß
    await client.query(`
      INSERT INTO subscription_tiers (name, "maxProjects", "maxLogEntries", "aiRequestsPerDay", "storageLimit", features, "monthlyPrice", "yearlyPrice")
      VALUES 
        ('free', 5, 1000, 10, 1048576, ARRAY['Âü∫Á°ÄÂäüËÉΩ', 'ÈÇÆ‰ª∂ÊîØÊåÅ'], 0, 0),
        ('pro', 50, 10000, 100, 10485760, ARRAY['È´òÁ∫ßÂäüËÉΩ', 'AIÊô∫ËÉΩÂàÜÊûê', '‰ºòÂÖàÊîØÊåÅ'], 9.99, 99.99),
        ('enterprise', -1, -1, -1, -1, ARRAY['Êó†ÈôêÂà∂ÂäüËÉΩ', 'ÂÆöÂà∂ÂºÄÂèë', '‰∏ìÂ±ûÊîØÊåÅ'], 29.99, 299.99)
    `);
    console.log('‚úÖ ËÆ¢ÈòÖÁ≠âÁ∫ßÊï∞ÊçÆ');

    // 5. È™åËØÅ
    console.log('\n5Ô∏è‚É£ È™åËØÅË°®ÂàõÂª∫...');
    const tables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    console.log(`Â∑≤ÂàõÂª∫ ${tables.rows.length} ‰∏™Ë°®:`);
    tables.rows.forEach(row => {
      console.log(`  ‚úÖ ${row.table_name}`);
    });

    // Ê£ÄÊü•ËÆ¢ÈòÖÁ≠âÁ∫ßÊï∞ÊçÆ
    const tierCount = await client.query('SELECT COUNT(*) FROM subscription_tiers');
    console.log(`\nüìä ËÆ¢ÈòÖÁ≠âÁ∫ßÊï∞Èáè: ${tierCount.rows[0].count}`);

    console.log('\nüéâ Êï∞ÊçÆÂ∫ìÈáçÁΩÆÂÆåÊàêÔºÅ');

  } catch (error) {
    console.error('\n‚ùå Êï∞ÊçÆÂ∫ìÈáçÁΩÆÂ§±Ë¥•:', error.message);
    console.error('ËØ¶ÁªÜÈîôËØØ:', error);
    process.exit(1);
  } finally {
    client.release();
    await pool.end();
  }
}

// ËøêË°åÈáçÁΩÆ
resetDatabase();